#!/bin/sh

# shell脚本教程地址：http://www.runoob.com/linux/linux-shell.html
# 本demo可以算作我的笔记，更多详情示例请仔细查看上面教程。


# 使用一个定义过的变量，只要在变量名前面加美元符号即可，如：
your_name='qinjx'
echo ${your_name}
echo ${#your_name}


# # 双引号的优点：
# # 双引号里可以有变量
# # 双引号里可以出现转义字符
# your_name='qinjx'
# str="Hello, I know your are \"$your_name\"! \n"


# # 我们可以在执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为：$n。n 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推……
# echo "Shell 传递参数实例！";
# echo "执行的文件名：$0";
# echo "第一个参数为：$1";
# echo "第二个参数为：$2";
# echo "第三个参数为：$3";


# # read 命令从标准输入中读取一行,并把输入行的每个字段的值指定给 shell 变量
# echo "Please input you name:\c"
# read name
# echo "$name is a good name"
# # 显示命令执行结果
# echo `pwd`
# echo `date`


# # format-string为双引号
# printf "%d %s\n" 1 "abc"
# # 单引号与双引号效果一样 
# printf '%d %s\n' 1 "abc" 
# # 没有引号也可以输出
# printf %s abcdef
# # 格式只指定了一个参数，但多出的参数仍然会按照该格式输出，format-string 被重用
# printf %s abc def
# printf "%s\n" abc def
# printf "%s %s %s\n" a b c d e f g h i j
# # 如果没有 arguments，那么 %s 用NULL代替，%d 用 0 代替
# printf "%s and %d \n" 


# # %s %c %d %f都是格式替代符
# # %-10s 指一个宽度为10个字符（-表示左对齐，没有则表示右对齐），任何字符都会被显示在10个字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来。
# # %-4.2f 指格式化为小数，其中.2指保留2位小数。
# printf "%-10s %-8s %-4s\n" 姓名 性别 体重kg  
# printf "%-10s %-8s %-4.2f\n" 郭靖 男 66.1234 
# printf "%-10s %-8s %-4.2f\n" 杨过 男 48.6543 
# printf "%-10s %-8s %-4.2f\n" 郭芙 女 47.9876


# # case工作方式: 取值后面必须为单词in，每一模式必须以右括号结束。取值可以为变量或常数。匹配发现取值符合某一模式后，其间所有命令开始执行直至 ;;。
# # 取值将检测匹配的每一个模式。一旦模式匹配，则执行完匹配模式相应命令后不再继续其他模式。如果无一匹配模式，使用星号 * 捕获该值，再执行后面的命令。
# # 示例：
# echo '输入 1 到 4 之间的数字:'
# echo '你输入的数字为:'
# read aNum
# case $aNum in
#     1)  echo '你选择了 1'
#     ;;
#     2)  echo '你选择了 2'
#     ;;
#     3)  echo '你选择了 3'
#     ;;
#     4)  echo '你选择了 4'
#     ;;
#     *)  echo '你没有输入 1 到 4 之间的数字'
#     ;;
# esac


# while :
# do
#     echo -n "输入 1 到 5 之间的数字:"
#     read aNum
#     case $aNum in
#         1|2|3|4|5) echo "你输入的数字为 $aNum!"
#         ;;
#         *) echo "你输入的数字不是 1 到 5 之间的! 游戏结束"
#             break
#         ;;
#     esac
# done


# # case的语法和C family语言差别很大，它需要一个esac（就是case反过来）作为结束标记，每个case分支用右圆括号，用两个分号表示break。
# while :
# do
#     echo -n "输入 1 到 5 之间的数字: "
#     read aNum
#     case $aNum in
#         1|2|3|4|5) echo "你输入的数字为 $aNum!"
#         ;;
#         *) echo "你输入的数字不是 1 到 5 之间的!"
#             continue
#             echo "游戏结束"
#         ;;
#     esac
# done








